generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  resetToken    String?
  resetTokenExpiry DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role[] @default([user])
  courses       Courses[]
  enrollments   Enrollments[]
  progress_tracking Progress_Tracking[]
}

enum Role {
  admin
  user
  teacher
}

model Courses  {
  id          String   @id @default(cuid())
  title       String    
  description String
  image       String?
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  startDate   DateTime
  endDate     DateTime
  teacher        User     @relation(fields: [teacherId], references: [id])
  teacherId      String
  course_material     Course_Material[]
  enrollments       Enrollments[]
  progress_tracking  Progress_Tracking[]
}

model Course_Material {
  id          String   @id @default(cuid())
  title       String
  description String?
  type       Type[]
  url        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Courses  @relation(fields: [courseId], references: [id])
  courseId    String
}

enum Type {
  video
  pdf
  audio
  text
}

model Enrollments {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Courses  @relation(fields: [courseId], references: [id])
  courseId    String
  teacher     User     @relation(fields: [teacherId], references: [id])
  teacherId   String
}

model Progress_Tracking {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Courses  @relation(fields: [courseId], references: [id])
  courseId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  progress    Int
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}